version: '3.8'

services:
  # 后端服务
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: data-query-backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - HOST=0.0.0.0
      - PORT=8000
      - DATABASE_URL=sqlite+aiosqlite:///app/data/database.sqlite
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-in-production}
      - ALLOW_REGISTER=${ALLOW_REGISTER:-true}
      - DATA_DIR=/app/data
    volumes:
      # 数据目录映射 - 持久化重要数据
      - ./docker-data/data:/app/data
      - ./docker-data/logs:/app/logs
      # 扩展脚本目录映射 - 方便开发和管理扩展
      - ./docker-data/extensions:/app/data/extensions
      # 文件上传目录映射 - 持久化用户文件
      - ./docker-data/uploads:/app/data/file
      # 数据库文件目录映射 - 持久化外部数据库文件
      - ./docker-data/db:/app/data/db
      # 配置文件映射 - 方便修改配置
      - ./config.py:/app/config.py:ro
      # 静态文件映射 - 前端构建产物
      - ./docker-data/static:/app/static
    depends_on:
      - redis
      - postgres
    networks:
      - data-query-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 前端服务 (Nginx)
  frontend:
    build:
      context: ./fr
      dockerfile: ../Dockerfile.frontend
    container_name: data-query-frontend
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      # Nginx配置文件
      - ./docker-config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker-config/default.conf:/etc/nginx/conf.d/default.conf:ro
      # SSL证书目录 (如果需要HTTPS)
      - ./docker-data/ssl:/etc/nginx/ssl:ro
      # 静态文件映射
      - ./docker-data/static:/usr/share/nginx/html/static:ro
    depends_on:
      - backend
    networks:
      - data-query-network

  # Redis 服务 (用于缓存和会话存储)
  redis:
    image: redis:7-alpine
    container_name: data-query-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - ./docker-data/redis:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    networks:
      - data-query-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL 数据库 (可选，用于生产环境)
  postgres:
    image: postgres:15-alpine
    container_name: data-query-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-dataquery}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres123}
    volumes:
      - ./docker-data/postgres:/var/lib/postgresql/data
      - ./docker-config/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - data-query-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 数据库管理工具 (可选)
  adminer:
    image: adminer:latest
    container_name: data-query-adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
    depends_on:
      - postgres
    networks:
      - data-query-network

  # 监控服务 (可选)
  prometheus:
    image: prom/prometheus:latest
    container_name: data-query-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker-config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./docker-data/prometheus:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - data-query-network

  # 日志收集 (可选)
  grafana:
    image: grafana/grafana:latest
    container_name: data-query-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
    volumes:
      - ./docker-data/grafana:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - data-query-network

networks:
  data-query-network:
    driver: bridge

volumes:
  # 定义命名卷（可选，如果不想使用绑定挂载）
  postgres_data:
  redis_data:
  app_data:
